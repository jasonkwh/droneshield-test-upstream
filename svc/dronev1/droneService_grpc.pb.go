// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: droneService.proto

package dronev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DroneService_Movement_FullMethodName = "/drone.DroneService/Movement"
)

// DroneServiceClient is the client API for DroneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DroneServiceClient interface {
	Movement(ctx context.Context, in *MovementRequest, opts ...grpc.CallOption) (*MovementResponse, error)
}

type droneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDroneServiceClient(cc grpc.ClientConnInterface) DroneServiceClient {
	return &droneServiceClient{cc}
}

func (c *droneServiceClient) Movement(ctx context.Context, in *MovementRequest, opts ...grpc.CallOption) (*MovementResponse, error) {
	out := new(MovementResponse)
	err := c.cc.Invoke(ctx, DroneService_Movement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DroneServiceServer is the server API for DroneService service.
// All implementations must embed UnimplementedDroneServiceServer
// for forward compatibility
type DroneServiceServer interface {
	Movement(context.Context, *MovementRequest) (*MovementResponse, error)
	mustEmbedUnimplementedDroneServiceServer()
}

// UnimplementedDroneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDroneServiceServer struct {
}

func (UnimplementedDroneServiceServer) Movement(context.Context, *MovementRequest) (*MovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Movement not implemented")
}
func (UnimplementedDroneServiceServer) mustEmbedUnimplementedDroneServiceServer() {}

// UnsafeDroneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DroneServiceServer will
// result in compilation errors.
type UnsafeDroneServiceServer interface {
	mustEmbedUnimplementedDroneServiceServer()
}

func RegisterDroneServiceServer(s grpc.ServiceRegistrar, srv DroneServiceServer) {
	s.RegisterService(&DroneService_ServiceDesc, srv)
}

func _DroneService_Movement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DroneServiceServer).Movement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DroneService_Movement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DroneServiceServer).Movement(ctx, req.(*MovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DroneService_ServiceDesc is the grpc.ServiceDesc for DroneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DroneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drone.DroneService",
	HandlerType: (*DroneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Movement",
			Handler:    _DroneService_Movement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "droneService.proto",
}
